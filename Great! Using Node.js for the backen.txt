Great! Using Node.js for the backend and MongoDB as the database is a solid choice for building a habit tracker. Here's a step-by-step guide on how you can set up your backend:

### 1. **Set Up Your Development Environment**
- **Install Node.js**: Make sure you have [Node.js](https://nodejs.org/en/) installed.
- **Install MongoDB**: You can either install MongoDB locally or use a cloud service like [MongoDB Atlas](https://www.mongodb.com/atlas).

### 2. **Initialize Your Node.js Project**
1. Create a project directory and navigate to it:
   ```bash
   mkdir habit-tracker-backend
   cd habit-tracker-backend
   ```
2. Initialize a new Node.js project:
   ```bash
   npm init -y
   ```
3. Install necessary dependencies:
   ```bash
   npm install express mongoose bcryptjs jsonwebtoken dotenv
   ```

   - **`express`**: Framework to handle routing.
   - **`mongoose`**: To interact with MongoDB.
   - **`bcryptjs`**: For password hashing.
   - **`jsonwebtoken`**: For generating authentication tokens.
   - **`dotenv`**: For environment variable management.

### 3. **Set Up Express Server**
Create a basic Express server:

```js
// server.js
const express = require('express');
const mongoose = require('mongoose');
const dotenv = require('dotenv');

dotenv.config();
const app = express();

// Middleware
app.use(express.json());

// MongoDB connection
mongoose.connect(process.env.MONGO_URI, {
  useNewUrlParser: true,
  useUnifiedTopology: true,
})
  .then(() => console.log('MongoDB connected'))
  .catch(err => console.log(err));

// Basic route
app.get('/', (req, res) => {
  res.send('Habit Tracker API');
});

// Start the server
const PORT = process.env.PORT || 5000;
app.listen(PORT, () => {
  console.log(`Server running on port ${PORT}`);
});
```

- Add your MongoDB URI in a `.env` file:
  ```
  MONGO_URI=mongodb://localhost:27017/habittracker
  ```

### 4. **Set Up User Authentication**
1. **Create a User Model** for MongoDB:
   ```js
   // models/User.js
   const mongoose = require('mongoose');

   const UserSchema = new mongoose.Schema({
     name: {
       type: String,
       required: true,
     },
     email: {
       type: String,
       required: true,
       unique: true,
     },
     password: {
       type: String,
       required: true,
     },
   });

   module.exports = mongoose.model('User', UserSchema);
   ```

2. **User Registration Route**:
   - Create a route to register users and hash their passwords.

   ```js
   const bcrypt = require('bcryptjs');
   const jwt = require('jsonwebtoken');
   const User = require('../models/User');

   // Register a new user
   app.post('/api/users/register', async (req, res) => {
     const { name, email, password } = req.body;

     try {
       let user = await User.findOne({ email });
       if (user) {
         return res.status(400).json({ msg: 'User already exists' });
       }

       user = new User({ name, email, password });

       // Hash the password
       const salt = await bcrypt.genSalt(10);
       user.password = await bcrypt.hash(password, salt);

       await user.save();

       // Generate JWT token
       const payload = {
         user: {
           id: user.id,
         },
       };

       jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
         if (err) throw err;
         res.json({ token });
       });
     } catch (err) {
       console.error(err.message);
       res.status(500).send('Server error');
     }
   });
   ```

3. **Login Route**:
   - Create a route for users to log in.

   ```js
   // Login user
   app.post('/api/users/login', async (req, res) => {
     const { email, password } = req.body;

     try {
       let user = await User.findOne({ email });
       if (!user) {
         return res.status(400).json({ msg: 'Invalid credentials' });
       }

       const isMatch = await bcrypt.compare(password, user.password);
       if (!isMatch) {
         return res.status(400).json({ msg: 'Invalid credentials' });
       }

       // Generate JWT token
       const payload = {
         user: {
           id: user.id,
         },
       };

       jwt.sign(payload, process.env.JWT_SECRET, { expiresIn: '1h' }, (err, token) => {
         if (err) throw err;
         res.json({ token });
       });
     } catch (err) {
       console.error(err.message);
       res.status(500).send('Server error');
     }
   });
   ```

4. **Authentication Middleware**:
   - Create middleware to protect routes.

   ```js
   // middleware/auth.js
   const jwt = require('jsonwebtoken');

   module.exports = function (req, res, next) {
     const token = req.header('x-auth-token');

     if (!token) {
       return res.status(401).json({ msg: 'No token, authorization denied' });
     }

     try {
       const decoded = jwt.verify(token, process.env.JWT_SECRET);
       req.user = decoded.user;
       next();
     } catch (err) {
       res.status(401).json({ msg: 'Token is not valid' });
     }
   };
   ```

### 5. **Set Up Habit Model**
Create a Habit model that allows users to track their habits.

```js
// models/Habit.js
const mongoose = require('mongoose');

const HabitSchema = new mongoose.Schema({
  user: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true,
  },
  name: {
    type: String,
    required: true,
  },
  description: String,
  streak: {
    type: Number,
    default: 0,
  },
  lastTracked: Date,
});

module.exports = mongoose.model('Habit', HabitSchema);
```

### 6. **Create Habit Routes**
1. **Add New Habit**:
   ```js
   const Habit = require('../models/Habit');
   const auth = require('../middleware/auth');

   // Create a new habit
   app.post('/api/habits', auth, async (req, res) => {
     const { name, description } = req.body;

     try {
       const newHabit = new Habit({
         user: req.user.id,
         name,
         description,
       });

       const habit = await newHabit.save();
       res.json(habit);
     } catch (err) {
       console.error(err.message);
       res.status(500).send('Server error');
     }
   });
   ```

2. **Get User's Habits**:
   ```js
   // Get all habits for the logged-in user
   app.get('/api/habits', auth, async (req, res) => {
     try {
       const habits = await Habit.find({ user: req.user.id });
       res.json(habits);
     } catch (err) {
       console.error(err.message);
       res.status(500).send('Server error');
     }
   });
   ```

3. **Update Habit Streak**:
   ```js
   // Update habit's streak
   app.put('/api/habits/:id', auth, async (req, res) => {
     try {
       const habit = await Habit.findById(req.params.id);

       if (!habit || habit.user.toString() !== req.user.id) {
         return res.status(404).json({ msg: 'Habit not found' });
       }

       habit.streak += 1;
       habit.lastTracked = new Date();

       await habit.save();
       res.json(habit);
     } catch (err) {
       console.error(err.message);
       res.status(500).send('Server error');
     }
   });
   ```

### 7. **Run the Application**
Now, you can run the application with:

```bash
node server.js
```

Or install `nodemon` for easier development:

```bash
npm install -g nodemon
nodemon server.js
```

### 8. **Testing the API**
You can test the API routes using tools like [Postman](https://www.postman.com/) or [Insomnia](https://insomnia.rest/).

### Future Improvements
- **Reminders**: Add push notifications or email reminders.
- **Analytics**: Show habit progress visually (graphs, etc.).
- **Habit Categories**: Allow users to categorize habits (e.g., fitness, learning).

With this setup, you have a fully functional backend for a habit tracker. You can now build the frontend or connect this API to a mobile app!